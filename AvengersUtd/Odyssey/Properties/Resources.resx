<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERR_ShaderModelNotSupported" xml:space="preserve">
    <value>Your hardware device does not support shaders version 2.0!</value>
  </data>
  <data name="ERR_Fatal" xml:space="preserve">
    <value>Fatal Error.</value>
  </data>
  <data name="ERR_FeatureNotSupported" xml:space="preserve">
    <value>This feature is not yet supported in the Odyssey Engine.</value>
  </data>
  <data name="ERR_SpotlightParameter" xml:space="preserve">
    <value>This parameter is not applicable to spotlights.</value>
  </data>
  <data name="ERR_UnrecognizedParameter" xml:space="preserve">
    <value>Unrecognized parameter.</value>
  </data>
  <data name="ERR_MaterialParameter" xml:space="preserve">
    <value>Unrecognized material parameter.</value>
  </data>
  <data name="ERR_FXVarNotFound" xml:space="preserve">
    <value>: Variable not found in effect file.</value>
  </data>
  <data name="ERR_FtNodeRequiresRNode" xml:space="preserve">
    <value>At least a RenderableNode child is required for a FreeTransformNode</value>
  </data>
  <data name="ERR_EnumNotValid" xml:space="preserve">
    <value>: Enum value not valid.</value>
  </data>
  <data name="ERR_FilenameNotValid" xml:space="preserve">
    <value>: Filename not valid.</value>
  </data>
  <data name="ERR_TNodeRequired" xml:space="preserve">
    <value>This node can only be added to a TransformNode.</value>
  </data>
  <data name="ERR_TechniqueNotFound" xml:space="preserve">
    <value>The technique {1} was not found in {0} collection.</value>
  </data>
  <data name="ERR_StyleNotFound" xml:space="preserve">
    <value>The specified style file was not found: {0}</value>
  </data>
  <data name="ERR_FontCannotBeNull" xml:space="preserve">
    <value>Font cannot be null.</value>
  </data>
  <data name="ERR_CreatingFromObject" xml:space="preserve">
    <value>You cannot create a {0} object from a null {1} type.</value>
  </data>
  <data name="RES_TextureNotCached" xml:space="preserve">
    <value>Texture not cached</value>
  </data>
  <data name="ERR_HudNoControls" xml:space="preserve">
    <value>There are no vertices in the chosen HUD!</value>
  </data>
  <data name="ERR_AddBaseCommand" xml:space="preserve">
    <value>Invalid command type specified. Use AddRenderCommand() instead.</value>
  </data>
  <data name="ERR_AddRenderCommand" xml:space="preserve">
    <value>Invalid command type specified. Use AddBaseCommand() instead.</value>
  </data>
  <data name="ERR_AddUpdateCommand" xml:space="preserve">
    <value>Invalid update command specified. Use AddBaseCommand() or AddRenderCommand() instead</value>
  </data>
  <data name="ERR_KeyNotFound" xml:space="preserve">
    <value>Key not found in {0}: {1}</value>
  </data>
  <data name="ERR_MissingFile" xml:space="preserve">
    <value>The file: {0} is missing.</value>
  </data>
  <data name="ERR_Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ERR_WrongCase" xml:space="preserve">
    <value>Parameter {0} is not valid in {1}.</value>
  </data>
  <data name="ERR_ArrayElements" xml:space="preserve">
    <value>The {0} array does not hold {1} elements.</value>
  </data>
  <data name="ERR_Argument" xml:space="preserve">
    <value>Argument {0} is not valid for method {1}.{2}. See the InnerException for details.</value>
  </data>
  <data name="ERR_ArgumentNull" xml:space="preserve">
    <value>Argument {0} for method {1}.{2} cannot be null.</value>
  </data>
  <data name="ERR_NoDetails" xml:space="preserve">
    <value>No details available.</value>
  </data>
  <data name="ERR_NoControlDescription" xml:space="preserve">
    <value>No ControlDescription file loaded. Be sure to call LoadControlDescription first.</value>
  </data>
  <data name="ERR_NoTextDescription" xml:space="preserve">
    <value>No TextDescription file loaded. Be sure to call LoadTextDescription first.</value>
  </data>
  <data name="ERR_TargetControlNull" xml:space="preserve">
    <value>The target control must not be null.</value>
  </data>
  <data name="ERR_IdNotFound" xml:space="preserve">
    <value>The control with the specified id was not found.</value>
  </data>
  <data name="ERR_AddNullControl" xml:space="preserve">
    <value>You cannot add null controls.</value>
  </data>
  <data name="ERR_ControlInCollection" xml:space="preserve">
    <value>The collection already contains control: {0} </value>
  </data>
  <data name="ERR_IdInCollection" xml:space="preserve">
    <value>The collection already contains a control by the same Id: {0}</value>
  </data>
  <data name="ERR_InvalidNumVertices" xml:space="preserve">
    <value>Invalid number of vertices specified for the specified Shape value.</value>
  </data>
  <data name="ERR_NodeAlreadyChild" xml:space="preserve">
    <value>The new node is already a child of this node.</value>
  </data>
  <data name="ERR_NodeIsAncestor" xml:space="preserve">
    <value>The newChild is an ancestor of this node.</value>
  </data>
  <data name="ERR_NodeIsLeaf" xml:space="preserve">
    <value>Can't add children to leaf nodes.</value>
  </data>
  <data name="ERR_NodeIsNull" xml:space="preserve">
    <value>Node is null.</value>
  </data>
  <data name="ERR_NodeNotChild" xml:space="preserve">
    <value>The node is not a child of this node.</value>
  </data>
</root>